# NOTE: Dont use `docker compose up --build` because s2-s5 will pull a stale image that
# won't reflect any changes s1 makes to the image in the build step. Instead call
# `docker compose build` then `docker compose up`.
x-common-variables: &common-server-variables
  RUST_LOG: "debug"
  SERVER_CONFIG_FILE: "/app/server-config.toml"
  CLUSTER_CONFIG_FILE: "/app/cluster-config.toml"
  OMNIPAXOS_NODE_ADDRS: "s1:8000,s2:8000,s3:8000" # Overwrite node_addrs in cluster config TOML
  OMNIPAXOS_LISTEN_ADDRESS: "0.0.0.0"             # Overwrite listen_address in server config TOMLs
  OMNIPAXOS_LISTEN_PORT: 8000                     # Overwrite listen_port in server config TOMLs

services:
  mysql_s1:
    image: mysql:latest
    container_name: mysql_s1
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: omnipaxos_db_s1
      MYSQL_USER: omnipaxos_user
      MYSQL_PASSWORD: omnipaxos_password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data_s1:/var/lib/mysql
  mysql_s2:
    image: mysql:latest
    container_name: mysql_s2
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: omnipaxos_db_s2
      MYSQL_USER: omnipaxos_user
      MYSQL_PASSWORD: omnipaxos_password
    ports:
      - "3308:3306"
    volumes:
      - mysql_data_s2:/var/lib/mysql
  mysql_s3:
    image: mysql:latest
    container_name: mysql_s3
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: omnipaxos_db_s3
      MYSQL_USER: omnipaxos_user
      MYSQL_PASSWORD: omnipaxos_password
    ports:
      - "3309:3306"
    volumes:
      - mysql_data_s3:/var/lib/mysql
  s1:
    image: omnipaxos-server
    build:
      context: ./..
      dockerfile: server.dockerfile
    container_name: s1
    environment:
      <<: *common-server-variables
      DATABASE_URL: "mysql://omnipaxos_user:omnipaxos_password@mysql_s1/omnipaxos_db_s1"
    volumes:
      - ./server-1-config.toml:/app/server-config.toml
      - ./cluster-config.toml:/app/cluster-config.toml
      - ./logs/:/app/logs/
    depends_on:
      - mysql_s1
  s2:
    image: omnipaxos-server
    container_name: s2
    environment:
      <<: *common-server-variables
      DATABASE_URL: "mysql://omnipaxos_user:omnipaxos_password@mysql_s2/omnipaxos_db_s2"
    volumes:
      - ./server-2-config.toml:/app/server-config.toml
      - ./cluster-config.toml:/app/cluster-config.toml
      - ./logs/:/app/logs/
    depends_on:
      - mysql_s2
  s3:
    image: omnipaxos-server
    container_name: s3
    environment:
      <<: *common-server-variables
      DATABASE_URL: "mysql://omnipaxos_user:omnipaxos_password@mysql_s3/omnipaxos_db_s3"
    volumes:
      - ./server-3-config.toml:/app/server-config.toml
      - ./cluster-config.toml:/app/cluster-config.toml
      - ./logs/:/app/logs/
    depends_on:
      - mysql_s3
  c1:
    image: omnipaxos-client
    build:
      context: ./..
      dockerfile: client.dockerfile
    container_name: c1
    environment:
      RUST_LOG: "debug"
      CONFIG_FILE: "/app/client-config.toml"
      OMNIPAXOS_SERVER_ADDRESS: "s1:8000" # Overwrite server_address in client config TOML
    volumes:
      - ./client-1-config.toml:/app/client-config.toml
      - ./logs/:/app/logs/
    depends_on:
      - s1
  c2:
    image: omnipaxos-client
    container_name: c2
    environment:
      RUST_LOG: "debug"
      CONFIG_FILE: "/app/client-config.toml"
      OMNIPAXOS_SERVER_ADDRESS: "s2:8000" # Overwrite server_address in client config TOML
    volumes:
      - ./client-2-config.toml:/app/client-config.toml
      - ./logs/:/app/logs/
    depends_on:
      - s2

volumes:
  mysql_data_s1:
  mysql_data_s2:
  mysql_data_s3: